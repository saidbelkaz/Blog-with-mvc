-- phpMyAdmin SQL Dump
-- version 5.2.0
-- https://www.phpmyadmin.net/
--
-- Hôte : 127.0.0.1
-- Généré le : mar. 30 août 2022 à 21:41
-- Version du serveur : 10.4.24-MariaDB
-- Version de PHP : 8.1.6

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Base de données : `blog_mvc`
--

-- --------------------------------------------------------

--
-- Structure de la table `article`
--

CREATE TABLE `article` (
  `id_article` int(11) NOT NULL,
  `titles` varchar(255) NOT NULL,
  `details` longtext NOT NULL,
  `images` varchar(255) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

--
-- Déchargement des données de la table `article`
--

INSERT INTO `article` (`id_article`, `titles`, `details`, `images`) VALUES
(11, '404 Not Found Error: What It Is and How to Fix It', 'The 404 Not Found Error is an HTTP response status code, which indicates that the requested resource could not be found. Like most HTTP response codes, the cause of a 404 Not Found Error can be challenging to track down and resolve. \r\n\r\nThis article will explore the 404 Not Found Error by examining what might cause this error. Later on, we\'ll provide a few tips to diagnose and debug your application\'s 404 error. \r\n\r\nWith that, let\'s get started!\r\n\r\nServer- or Client-Side?\r\nAll HTTP response status codes in the 4xx category are client error responses. These types of messages contrast with errors in the 5xx category, such as the 502 Bad Gateway Error, which are server error responses. \r\n\r\nThat said, the appearance of a HTTP 404 error doesn\'t always mean the issue is client-related (web browser or device used to access the application). Sometimes, the root of the problem is server-side. Remember, the server is still the network object producing the 404 Not Found Error.\r\n\r\nWe\'ll explore some of the scenarios (and potential solutions) where the error results from the server and/or client issues in the following sections.\r\n\r\nStart With a Thorough Application Backup\r\nMake a backup of your application, database, etc. before trying to fix or change the system. Even better, if you have the capability, create a complete copy of the application onto a secondary staging server that isn\'t available to the public. This will give you a clean testing ground to test all potential fixes without threatening your live application. \r\n\r\nAfter you\'ve done that, it\'s time to start diagnosing and fixing your 404 error.\r\n\r\nDiagnosing a 404 Not Found Error\r\nA HTTP 404 error happens when a resource is unavailable. The client (web browser) received a message from the server (remote computer) that the specific resource (web page/URL) is unavailable.\r\n\r\nHere are a few scenarios where this could happen: \r\n\r\nThe client sent a proper request to the server, and the server successfully received that request, and the server could not find a valid resource at that particular location. This is typically due to an invalid URL specified by the client. This represents the majority of 404 Not Found Errors.\r\nSome web applications \"fake\" 404 Not Found Errors when requesting an invalid resource. The server returns a standard 200 OK response code, which means the resource loaded as expected, however, the server displayed a custom \"404 page.” Such fake errors are typically referred to as soft 404 errors. \r\nThe provided URL could have been valid in the past, but the server has failed to provide a server-side redirect.\r\n\r\nTroubleshooting on the Client-Side\r\nThe best way to start troubleshooting a 404 Not Found Error is to look for potential issues on the client side. Here are a few tips to try on the browser or device that\'s giving you problems.\r\n\r\nCheck the Requested URL\r\nThe most common cause of a 404 Not Found Error is inputting an incorrect URL. Domain names (e.g., airbrake.io) are case-insensitive, meaning that this mixed case link to AirBrAKe.IO works just as well as the standard, lowercase version of airbrake.io. However, path, query, or fragment portions that appear after the domain name are often case-sensitive unless the application/server configuration pre-processes all URLs as lowercase before execution.\r\n\r\nFor example, while airbrake.io can be upper, lower, or mixed case, a link to airbrake.io/ERROR-MONITORING/ (with BLOG in uppercase) is invalid, resulting in our good friend the 404 Not Found Error. \r\n\r\nOf course, the lowercase version to https://www.airbrake.io/error-monitoring works just fine, as expected.\r\n\r\nAs you can see, a minor typo in part of the URL can easily result in an unexpected 404 Not Found Error.\r\n\r\nClear Relevant Cookies\r\nAs you may already be aware, HTTP cookies are tiny pieces of data stored on your local device. Websites and applications use these cookies to \"remember\" information about this particular browser and/or device. \r\n\r\nMost modern web apps take advantage of cookies to store user and browser-specific data. By doing so, the app can identify the client and allow future visits to be faster and easier.\r\n\r\nHowever, cookies can store just about any information. In many cases, web applications or services -- such as ad networks -- will use data retrieved from local cookies to redirect or handle incoming requests. An invalid or corrupted cookie can \"confuse\" the server as you try to access a resource that no longer exists. .\r\n\r\nIn most cases, you only need to concern yourself with cookies relevant to the website or application causing the problem. Cookies are stored based on the web application\'s domain name, so you can explicitly remove only those cookies that match the website domain (e.g., airbrake.io). \r\n\r\nHowever, if you are unfamiliar with manually removing certain cookies, it\'s much easier and safer to clear all cookies at once.\r\n\r\nClearing cookies can be accomplished in different ways, depending on the browser you\'re using:\r\n\r\nGoogle Chrome\r\nInternet Explorer\r\nMicrosoft Edge\r\nMozilla Firefox\r\nSafari\r\nLog Out and Log In\r\nIf your application has some form of user authentication, the last client-side step to try is to log out and then log back in. \r\n\r\nIf you\'ve recently cleared the browser cookies, this should usually log you out automatically the next time you try to load the page. \r\n\r\nThe application may have a problem with your previous session in some situations. As with other data, the session token (or session string) is stored locally on your device in the cookies and is transferred by the client to the server during every request. If the server doesn\'t recognize the session token sent by the client or something has gone wrong with the server that indicates that particular token is invalid, you may get a 404 error.\r\n\r\nFor most web applications, logging out and logging back in will force the local session token to be recreated.\r\n\r\nDebugging Common Platforms\r\nIf you\'re running common software packages on the server that is responding with the 404 Not Found Error, you may want to start by looking into the stability and functionality of those platforms first. \r\n\r\nThe most common content management systems -- like WordPress, Joomla!, and Drupal -- are all typically well-tested out of the box. Still, once you start modifying the underlying extensions or PHP code, it\'s easy to cause an unforeseen issue that results in a HTTP 404 error.\r\n\r\nHere are a few tips to help you troubleshoot some of these popular software platforms:\r\n\r\nRollback Recent Upgrades\r\nIf you recently updated the content management system itself before the 404 Not Found Error appeared, consider rolling back to the previous version you had installed when things were working fine. \r\n\r\nSimilarly, any extensions or modules you may have recently upgraded can cause server-side issues, so reverting to previous versions of those may also help. \r\n\r\nFor assistance with this task, simply Google \"downgrade [PLATFORM_NAME]\" and follow along. In some cases, however, certain CMSs don\'t provide a version downgrade capability. This is typically the case for the more popular platforms.\r\n\r\nUninstall New Extensions, Modules, or Plugins\r\nThe purpose of new extensions, modules, or plugins (they all mean the same thing) is to improve the capabilities and features of the platform beyond what it\'s capable of out of the box. \r\n\r\nKeep in mind that some extensions can take complete control of the system. Once they do, they can make virtually any changes to the PHP code, HTML, CSS, JavaScript, or database. As such, it may be wise to uninstall any recently added extensions if you\'re experiencing a 404 error.\r\n\r\nCheck for Unexpected Database Changes\r\nIf you uninstall an extension, it may not completely remove all changes made by the extension. This is particularly true for many WordPress extensions, which are given carte blanche within the application. This can include full access rights to the database. \r\n\r\nThese extensions can modify database records that don\'t \"belong\" to the extension itself but are created and managed by other extensions (or even the base CMS itself). In those scenarios, the extension may not know how to revert alterations to database records, so it will ignore such things when uninstalled. \r\n\r\nIf you\'re convinced an extension is the likely culprit for the 404 Not Found Error, open the database and manually look through tables and records that were likely modified by the extension.\r\n\r\nTroubleshooting on the Server-Side\r\nIf you aren\'t running a CMS application, here are some additional tips to help you troubleshoot your server.\r\n\r\nCheck Your Web Server Configuration\r\nMost modern web servers provide one or more configuration files that allow you to adjust server behavior based on various circumstances easily. \r\n\r\nFor example, the server may be configured to reject requests to specific directories or URLs, resulting in a 404 Not Found Error.\r\n\r\nConfiguration options for each different type of web server can vary dramatically. We\'ll list a few popular web servers you can look through:\r\n\r\nApache\r\nNginx\r\nIIS\r\nNode.js\r\nApache Tomcat\r\nLook Through the Logs\r\n\r\nNearly every web application will keep some form of server-side logs. Application logs are typically the history of what the application did, including requested pages, connected servers, database results, etc.  \r\n\r\nServer logs are related to the actual hardware running the application. These logs will often provide details about the health and status of all connected services or the server itself. \r\n\r\nGoogle \"logs [PLATFORM_NAME]\" if you\'re using a CMS, or \"logs [PROGRAMMING_LANGUAGE]\" and \"logs [OPERATING_SYSTEM]\" to get more information on finding the logs in question.\r\n\r\nValidate Application Links\r\nThere are several tools you can use to ensure your application is not producing any 404 Not Found Errors. \r\n\r\nFor starters, you should register your site with the Google Search Console (if you haven\'t done so already). This tool gives you insight into what Google\'s web crawler bots have found while traversing your site. \r\n\r\nAny issues will be displayed here for all your registered applications and can be an easy (and automatic) way to find invalid links or other site problems.\r\n\r\nNeed to check a particular resource or URL? Use the W3C Link Checker tool to check links for 404 errors.\r\n\r\nDebug Your Application Code or Scripts\r\nIf all else fails, it may be that a problem in some custom code within your application is causing the issue. Try to diagnose where the issue may come from by manually debugging your application and parsing through application and server logs. \r\n\r\nIdeally, make a copy of the entire application to a local development machine and perform a step-by-step debug process. This will allow you to recreate and view when and how the 404 error occurred.', '630a1a19b81837.85287238.jpg'),
(12, '504 Gateway Timeout Error: What It Is and How to Fix It', ' A 504 Gateway Timeout Error is an HTTP response status code indicating that a server currently acting as a gateway or proxy did not receive a timely response from another server further upstream. As with most HTTP response codes, it can be challenging to determine the exact cause of a 504 Gateway Timeout Error. \r\n\r\nThroughout this article, we\'ll examine the 504 Gateway Timeout Error and look at a few troubleshooting tips and potential fixes.\r\n\r\nThe Problem is Server-Side\r\nAll HTTP response status codes in the 5xx category are server error responses. Similar to the 502 Bad Gateway Error, a 504 Gateway Timeout Error means that something has gone wrong with a gateway or proxy server further upstream. \r\n\r\nIn general networking parlance, an upstream server is a server that provides a service to (i.e. is accessed by) another server. Thus, a server upstream is located higher in the overall server hierarchy than a downstream server. The terms \"upstream\" and \"downstream\" refer to the relative distance of a server from your device. The further the server is from your device, the more \"upstream\" it is.\r\n\r\nSince the 504 Gateway Timeout Error indicates that something has gone wrong within your application\'s server, we can largely disregard the client side. If you\'re having trouble with your application, you can disregard most client-side code, including HTML, CSS, and JavaScript. This doesn\'t apply solely to websites, either. \r\n\r\nMany web applications behind the scenes power smartphone apps with a modern-looking user interface. If a 504 Gateway Timeout Error occurs, the issue isn\'t related to the app installed on your phone or local testing device. Instead, it will be something on the server-side.\r\n\r\nThe problem may not be with the specific web server your application is running on. Instead, it\'s possible that every aspect of your particular application (along with its servers) are working flawlessly. However, a 504 Gateway Timeout Error could still occur if an upstream server is experiencing problems.\r\n\r\nStart With a Thorough Application Backup\r\nAs with anything, it\'s better to be safe than sorry. As such, it is critical that you perform a full backup of your application and database before attempting any fixes. If you have the capability, create a complete copy of the application onto a secondary staging server that isn\'t \"live.” This will create a safe environment to test possible solutions to the problem, without jeopardizing your live application.\r\n\r\nDiagnosing a 504 Gateway Timeout Error\r\nAs mentioned before, a 504 Error means that a server upstream did not receive a \"timely\" response from another server further along upstream. The server providing the 504 Gateway Timeout Error is acting as a gateway. \r\n\r\nLet\'s take a moment to discuss what a gateway (or proxy) is. In most HTTP communications, a client will connect to a server via a third-party gateway computer. The gateway acts as, well, a gateway by which messages from the client are securely sent to the server, and vice-versa. A gateway acts as a node within the larger network web, connecting and routing communications between multiple clients, servers, and other nodes within the (virtual) vicinity.\r\n\r\nBelieve it or not, most homes with Internet access have an active gateway. Your local home network, which is likely set up through a router (or router+modem hybrid), typically assigns IP addresses to all the devices on your network using the base address of 192.168.1.*, where the asterisk changes depending on the device. In most cases, communication from one such local network address to another local network address is allowed. \r\n\r\nProblems arise when your computer attempts to connect to an IP address outside of this base range. Your router\'s gateway will intercept it and perform the communication between your computer and the remote server on your behalf.\r\n\r\nIn some situations, the web server running your application may cause the problem. This is particularly true when your server is running either a combination frontend+backend server setup (such as Nginx and Apache), or the web server relies on third-party services, which are typically located elsewhere on additional upstream servers. Any of the upstream servers your client (web browser) is connecting through may be down or experiencing issues at this time, causing delays in processing and a 504 Status Code.\r\n\r\nTroubleshooting on the Server-Side\r\nHere are some additional tips to help you troubleshoot your server to find the cause of a 504 Error: \r\n\r\nRecent DNS Changes - The Domain Name System (DNS) is a decentralized naming system for devices connected through a network. In short, the DNS associates domain names (e.g. airbrake.io) to specific IP addresses. It then stores that association in a series of authoritative name servers worldwide. If you recently changed your DNS server or moved your site, that could be the cause of the 504 Error. \r\nServer Connectivity Issues - Most modern applications don\'t reside on a single server. Instead, they are spread over multiple systems and/or rely on third-party services. If any one of these servers is down for maintenance or otherwise inaccessible, this could result in an error that appears to be from your own application.\r\nImproper Firewall Configuration - A firewall is a basic security device that monitors network traffic and acts as a gatekeeper. Essentially, it decides which traffic is safe and which could be malicious. In some situations, a firewall configured somewhere on your application’s network might be preventing some form of critical traffic from getting through. \r\nCheck the Logs - Nearly every web application will keep some form of server-side logs. Application logs are the history of what the application did and contains requested pages, connected servers, and database results. Server logs are related to the actual hardware that is running the application. These logs will often provide details about the health and status of all connected services or even just the server itself. \r\nApplication Code or Script Bugs - Try to diagnose where the issue may be coming from by parsing through application and server logs. Ideally, make a copy of the entire application to a local development machine and perform a step-by-step debug process. \r\nIf you see a 504 Gateway Timeout Error, it means you probably need an error management tool. Such tools automatically detect these and other errors in the future. They can even alert you and your team immediately when an error occurs. \r\n\r\nAirbrake\'s error monitoring software provides real-time error monitoring and automatic exception reporting for all your development projects. Airbrake\'s web dashboard provides you with 24/7 updates on your application\'s health and error rates. No matter what you\'re working on, Airbrake easily integrates with all the most popular languages and frameworks. Plus, Airbrake features such as customizable exception parameters and error filterings allow you to gather the errors that matter most. \r\n\r\nCheck out Airbrake\'s error monitoring software today and create a free dev account! See for yourself why so many of the world\'s best engineering teams use Airbrake to revolutionize their exception handling practices!\r\n\r\nNote: We published this post in October 2017 and recently updated it in July 2022.', '630a1a767ff9d5.15657622.jpg'),
(13, 'Create a Serverless Twitter Bot with Airbrake and AWS Lambda - Part 2', 'In Part 1 we setup our development environment, created our twitter-bot project, integrated it with the Twitter API so it could send out programmatic tweets, and performed a basic Atom feed retrieval for some actual content to tweet.\r\n\r\nToday, we\'ll continue refining our Twitter bot by integrating automatic error handling with Airbrake\'s Node.js software. This will ensure our Twitter bot is always stable and executing as expected, since we\'ll be alerted immediately if something goes wrong. We\'ll then begin the process of getting our application into a serverless environment with AWS Lambda, before we finish everything up in Part 3 later this week. You can also view the full source code for this project at anytime on GitHub, so with that let\'s jump right in!\r\n\r\nGetting Started with Airbrake\r\nTo begin using the Airbrake-JS module we need to Create an Airbrake account, sign in, and make a new project.\r\n\r\nNow we just need to locally install Airbrake-JS package. We\'ll do this in a console from our project root directory using the npm install --save airbrake-js command:\r\n\r\n$ npm install --save airbrake-js\r\n\r\nnpm WARN twitter-bot@1.0.0 No repository field.\r\n+ airbrake-js@1.0.0\r\n added 1 package in 0.879s\r\n \r\n\r\nAlternatively, we could also install it by adding airbrake-js to our package.json dependencies:\r\n\r\n{\r\n\r\n  \"dependencies\": {\r\n\r\n    \"airbrake\": \"^2.0.1\"\r\n\r\n  }\r\n\r\n}\r\n\r\nHandling Secret Keys\r\nWe need to instantiate the Airbrake client object in our application by passing the projectId and projectKey values obtained from the twitter-bot project we created on the Airbrake dashboard. However, we don\'t want to publicly expose these values, so we\'ll implement the same technique we used in Part 1 to hide the Twitter API secret keys.\r\n\r\nLet\'s start by adding airbrake-credentials.js to our .gitignore file, since this is the file we\'ll use to hold our private projectId and projectKey values. Our .gitignore file should look something like this:\r\n\r\n### .gitignore ###\r\n\r\n# Airbrake credentials\r\n\r\nairbrake-credentials.js\r\n# Twitter API credentials\r\n twitter-api-credentials.js\r\n\r\n\r\n# IDEA directory\r\n .idea/\r\n \r\n\r\nNow, let\'s create the airbrake-credentials.js file, then copy and paste the projectId and projectKey values into the appropriate properties, similar to what we did in twitter-api-credentials.js:\r\n\r\n// airbrake-credentials.js\r\n\r\nmodule.exports = {\r\n\r\n    projectId: \"PROJECT_ID\",\r\n\r\n    projectKey: \"PROJECT_API_KEY\",\r\n\r\n};\r\n\r\nIntegrating Airbrake-JS\r\nWe can now require the airbrake-credentials.js file in our application code and pass the exported object to the AirbrakeClient constructor. We\'ll start by requiring airbrake-js and airbrake-credentials.js. We\'ll then pass the credentials to new AirbrakeClient(...) to create the actual client object we can use in our code:\r\n\r\n// index.js\r\n\r\nconst airbrake_credentials = require(\'./airbrake-credentials\');\r\n\r\nconst AirbrakeClient = require(\'airbrake-js\');\r\n// Use exported secret credentials.\r\n let airbrake = new AirbrakeClient(airbrake_credentials);\r\n \r\n\r\nThat\'s all there is to using airbrake-js with default settings! All thrown Errors will be detected by airbrake-js and will be instantly, automatically reported to you via the Airbrake project dashboard (and also via email or other service integrations you may have setup). For our purposes we\'ll add a simple tweet(message) function that attempts to tweet the passed message argument:\r\n\r\n/**\r\n\r\n * Tweet the passed string message.\r\n\r\n *\r\n\r\n * @param message String to be tweeted.\r\n\r\n */\r\n\r\nfunction tweet(message) {\r\n\r\n    if (message === null || message === \'\') return;\r\n\r\n    twitter.post(\r\n\r\n        \'statuses/update\',\r\n\r\n        {\r\n\r\n            status: message\r\n\r\n        },\r\n\r\n        tweetCallback\r\n\r\n    );\r\n\r\n}\r\n\r\nWe\'ve also started to clean up the code a bit by creating the tweetCallback(error, tweet, response) function, which is invoked as the callback for the twitter.post method call used throughout our code:\r\n\r\n/**\r\n\r\n * Callback for tweet attempts.\r\n\r\n *\r\n\r\n * @param error Caught error.\r\n\r\n * @param tweet Tweet.\r\n\r\n * @param response Response.\r\n\r\n */\r\n\r\nfunction tweetCallback(error, tweet, response) {\r\n\r\n    if(error) {\r\n\r\n        console.log(error);\r\n\r\n        throw new Error(error[0].message);\r\n\r\n    }\r\n\r\n    console.log(\'---- TWEETED ----\');\r\n\r\n    console.log(tweet);\r\n\r\n}\r\n\r\nThe error object passed to tweetCallback(error, tweet, response) is actually a one-dimensional array, so we explicitly throw a new Error and pass the message property of the underlying error object that was caught, if applicable. Otherwise a successful tweet was posted, so we log that to the console.\r\n\r\nWe can test this by calling tweet(message):\r\n\r\ntweet(\'Hello world.\');\r\n\r\nThis produces a successful tweet:\r\n\r\n---- TWEETED ----\r\n\r\n{ created_at: \'Tue Jan 02 00:11:00 +0000 2018\',\r\n\r\n  id: 947983527877886000,\r\n\r\n  id_str: \'947983527877885952\',\r\n\r\n  text: \'Hello world.\',\r\n\r\n...\r\n\r\nHowever, let\'s see what happens if we try to send the same tweet again:\r\n\r\ntweet(\'Hello world.\');', '630a1abe605720.54431432.jpg'),
(14, 'Create a Serverless Twitter Bot with Airbrake and AWS Lambda - Part 2', 'The 406 Not Acceptable is an HTTP response status code indicating that the client has requested a response using Accept- headers that the server cannot fulfill. The 406 Error is the result of the user agent (i.e., browser) specifying an acceptable character set (via Accept-Charset), language (via Accept-Language), etc. that needs a response and the server is unable to provide such a response. This article will examine what causes a 406 Not Acceptable error and how to fix it. Using a Content Management System (CMS)? Not a problem! We\'ll also review how these systems generate 406 Not Acceptable errors. And, with that, let\'s get started! Server- or Client-Side? All HTTP response status codes in the 4xx category are considered client error responses. This category contrasts with 5xx classification errors, such as the 504 Gateway Timeout Error, which are considered server error responses. That said, the appearance of a 4xx error doesn\'t necessarily mean the issue is on the client side, where the \"client\" is the web browser or device used to access an application. In some cases, the server could be responsible for the 406 Error since it\'s the network object producing the error. Perhaps the server is misconfigured and can\'t handle the request correctly. Maybe it\'s a traffic routing issue. We\'ll look at both client and server-side issues within this article, but first, let\'s make sure you\'re set up to diagnose and debug your application. Start With a Thorough Application Backup Before attempting to fix any errors, you should perform a complete backup of your application, database, and all other components of your website or application. Even better, create a complete copy of the application and stick the copy on a secondary staging server that isn\'t accessible to the public. A staging server will give you a clean testing ground to test all potential fixes to resolve the issue without threatening the sanctity of your live application. Diagnosing a 406 Not Acceptable As discussed in the introduction, a 406 Not Acceptable Error means that the user agent (the web browser, in most cases) has requested a valid resource; however, the request included a special Accept- header. The Accept- header indicates to the server a valid response can only contain certain types of information. Here are a few examples of such scenarios: The user agent may be localized to a particular locale or language the server cannot provide. For example, a user agent may use the Accept-Language request header to specify a valid language of French (Accept-Language: fr). Still, if the server cannot serve a response in French, a 406 code may be the only proper response. The user agent may request a specific type of content to be returned by the server. These content types, commonly known as MIME types, define things like plain text (text/plain), PNG images (image/png), mp4 videos (video/mp4), etc. Thus, the client may include the Accept header in the request and define an explicit MIME type that the server should provide (e.g., Accept: application/XML). If the server cannot respond with the matching content type requested, a 406 Not Acceptable response may be necessary. There are a handful of other Accept- headers that can be provided in HTTP requests. Still, the vast majority of scenarios are similar to the above: The user agent wants an explicit type of response, and the server either provides it or returns a 406 code indicating it cannot fulfill the request. Troubleshooting on the Client-Side Since the 406 Not Acceptable is a client error response code, it\'s best to troubleshoot any potential client-side issues first. Here are a few tips to try on the browser or device throwing the error. Check the Requested URL The most common cause of a 406 Not Acceptable is inputting an incorrect URL. Servers tend to be tightly secured against unexpected requests to resources that a client/user agent should not have access to. It may be that the requested URL is slightly incorrect, which is causing the user agent to request a specific type of response. For example, a request to the URI https://airbrake.io?json might indicate to the server that a JSON response is required. Since 406 codes are not as common as 404 codes, the appearance of a 406 could mean that the requested URL is valid, but the browser may misinterpret the intended request type. Either way, it\'s a good idea to double-check the exact URL that is returning the 406 Not Acceptable error to make sure it is the intended resource. Debugging Common Platforms Suppose you\'re running common software packages on the server responding with the 406 Not Acceptable. In that case, you may want to start by first looking into those platforms\' stability and functionality. The most common content management systems (CMS) -- like WordPress, Joomla!, and Drupal -- are all typically well-tested out of the box. Once you start making modifications to the underlying extensions or PHP code, it\'s too easy to cause an unforeseen issue that results in a 406 Not Acceptable. Here are a few tips to help you troubleshoot some of these popular software platforms. Rollback Recent Upgrades If you recently updated the content management system before the 406 Not Acceptable appeared, consider rolling back to the previous version you had installed. Similarly, any extensions or modules you recently upgraded can also cause server-side issues, so reverting to previous versions of those may also help. In some cases, however, certain CMSs don\'t have a version downgrade capability. This is likely because they consider the base application and each new version released to be highly stable and bug-free. Uninstall New Extensions, Modules, or Plugins Depending on the content management system you use, the exact names of these components will be different. Still, they all serve the same purpose across every system: improving the capabilities and features of the platform beyond what it\'s typically capable of out of the box. Be warned: such extensions can, more or less, take complete control of the system and make virtually any changes to the CMS\'s code. As such, it may be wise to uninstall any new extensions you recently added. Check for Unexpected Database Changes Even if you uninstall an extension through the CMS dashboard, this doesn\'t guarantee that changes made by the extension will fully revert. This is particularly true for many WordPress extensions. WordPress extensions are given carte blanche within the application, including full access rights to the database. That means they can modify database records that don\'t \"belong\" to the extension but are created and managed by other extensions (or even the base CMS). Unfortunately, the extension may not know how to revert alterations to database records so that it will ignore such things during uninstallation. Diagnosing such problems can be tricky, but I\'ve personally encountered such scenarios multiple times. Your best course of action, assuming you\'re reasonably convinced an extension is a likely culprit for the 406 Not Acceptable Error, is to open the database and manually look through tables and records that were likely modified by the extension. Troubleshooting on the Server-Side If you aren\'t running a CMS application or you\'re confident the 406 Not Acceptable Error isn\'t related to that -- here are some additional tips to help you troubleshoot what might be causing the issue on the server-side. Confirm Your Server Configuration Your application is likely running on a server using one of the two most popular web server software, Apache or Nginx. One of the first steps you can take to determine what might be causing these 406 Not Acceptable response codes is to check the configuration files for your web server software for unintentional redirect or request handling instructions. To determine your application\'s web server, you\'ll want to look for a key file. Apache Server If your web server is Apache, look for a .htaccess file within the root directory of your website file system. For example, if your application is on a shared host, you\'ll likely have a username associated with the hosting account. The application root directory is typically found at the path of: /home//public_html/, so the .htaccessfile would be at /home//public_html/.htaccess. If you located the .htaccess file, open it in a text editor and look for lines that use RewriteXXX directives, which are part of the mod_rewrite module in Apache. Covering exactly how these rules work is well beyond the scope of this article; however, the basic concept is that a RewriteCond directive defines a text-based pattern that will be matched against entered URLs. Suppose a visitor requests a matching URL to the site. In that case, the RewriteRule directive that follows one or more RewriteCond directives is used to perform the actual redirection of the request to the appropriate URL. For example, a RewriteRule matches all incoming requests to https://airbrake.io/users/json that do not contain an Accept: application/JSON request header. The result is a redirection and 406 Not Acceptable response error code: RewriteEngine on RewriteCond %{REQUEST_URI} ^/users/json/?.*$ RewriteCond %{HTTP_ACCEPT} !application/json RewriteRule ^(.*)$ https://airbrake.io/users/json$1 [R=406,L] Notice the R=406 flag at the end of the RewriteRule, which explicitly states that the response code should be 406. This tells the user agents that the resource exists, but the explicit Accept- headers could not be fulfilled. If you find any strange RewriteCondor RewriteRule directives in the .htaccess file that don\'t seem to belong, try temporarily commenting them out (using the # character prefix) and restarting your web server to see if this resolves the issue. Nginx On the other hand, if your server is running on Nginx, you\'ll need to look for a completely different configuration file. By default this file is named nginx.conf and is located in one of a few common directories: /usr/local/nginx/conf, /etc/nginx, or /usr/local/etc/nginx. Once located, open nginx.conf in a text editor and look for directives using the 406 response code flag. For example, here is a block directive (i.e., a named set of directives) that configures a virtual server for airbrake.io and ensures that, similar to above, a request to https://airbrake.io/users/json that doesn\'t include an Accept: application/JSON request header will fail and is met with a 406 response code: server { listen 80; listen 443 ssl; server_name airbrake.io; location /users/json { if ($http_accept != application/json) { return 406 https://airbrake.io/users/json$request_uri; } } } Have a look through your nginx.conf file for any abnormal directives or lines that include the 406 flags. Comment out any abnormalities before restarting the server to see if the issue was resolved. Configuration options for each different type of web server can vary dramatically, so we\'ll list a few popular ones to give you some resources to look through, depending on what kind of server your application is running on: Apache Nginx IIS Node.js Apache Tomcat Look Through the Logs Nearly every web application will keep some form of server-side logs. Application logs are typically the history of the application\'s actions, including requested pages, connected servers, database results, etc. Server logs are related to the actual hardware running the application and will often provide details about the health and status of all connected services or the server itself. Google \"logs [PLATFORM_NAME]\" if you\'re using a CMS, or \"logs [PROGRAMMING_LANGUAGE]\" and \"logs [OPERATING_SYSTEM]\" if you\'re running a custom application, to get more information on finding the logs in question. Debug Your Application Code or Scripts If all else fails, you might have a problem with some custom code within your application. Try to diagnose where the issue may come from by manually debugging your application and parsing through application and server logs. Ideally, make a copy of the entire application to a local development machine and perform a step-by-step debug process, which will allow you to recreate the exact scenario in which the 406 Not Acceptable occurred and view the application code at the moment something goes wrong. Prevent an future unexpected 406 Not Acceptable Error from impacting users by implementing an error monitoring solution. Error Monitoring will help you automatically detect errors and will alert you the very moment they occur.', '630a1b9ea5a6f4.41726122.jpg'),
(15, 'test', 'content', '630a637db9aab3.30328950.jpg'),
(16, 'test article ', 'test content', '630a65641e2d69.52962743.jpg'),
(17, 'test article', ',kncdskncds', '630a7a224561f0.63845703.jpg'),
(18, 'sdsfdsfdsfdsq', 'dfsqdfdsfsdfdsfs', '630a7a8d13a266.79126518.jpg'),
(19, 'qsdsqd', 'sqdsqd', '630a7af8c33039.18676104.jpg');

-- --------------------------------------------------------

--
-- Structure de la table `comment`
--

CREATE TABLE `comment` (
  `id_comment` int(11) NOT NULL,
  `id_article` int(11) DEFAULT NULL,
  `full_name` varchar(255) NOT NULL,
  `content` longtext NOT NULL,
  `date_comment` datetime NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

--
-- Déchargement des données de la table `comment`
--

INSERT INTO `comment` (`id_comment`, `id_article`, `full_name`, `content`, `date_comment`) VALUES
(15, 13, 'ahmed', 'nice ', '2022-08-27 14:25:54'),
(17, 11, 'ibrahim564', 'goood article', '2022-08-27 15:08:17'),
(18, 12, 'SA ID', 'NICE', '2022-08-27 15:09:25'),
(19, 12, 'OUSSAMA', 'TEST COMMENT', '2022-08-27 15:09:54'),
(20, 13, 'KAMAL', 'good article', '2022-08-27 15:10:28'),
(21, 14, 'Jamal', '010203', '2022-08-27 15:10:44'),
(22, 15, 'ibrahim564', 'sss', '2022-08-27 19:33:46'),
(23, 11, 'test1', 'content test1', '2022-08-27 19:40:52'),
(24, 11, 'SA ID', 'sdfsd', '2022-08-27 21:09:37'),
(25, 11, 'test2', 'ajdiofjsifdsdf', '2022-08-27 21:11:33'),
(26, 11, 'dfgdfg', 'dfgdfg', '2022-08-27 21:13:19');

-- --------------------------------------------------------

--
-- Structure de la table `users`
--

CREATE TABLE `users` (
  `id_users` int(11) NOT NULL,
  `full_name` varchar(255) NOT NULL,
  `email_users` varchar(255) NOT NULL,
  `password_users` varchar(255) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

--
-- Index pour les tables déchargées
--

--
-- Index pour la table `article`
--
ALTER TABLE `article`
  ADD PRIMARY KEY (`id_article`);

--
-- Index pour la table `comment`
--
ALTER TABLE `comment`
  ADD PRIMARY KEY (`id_comment`),
  ADD KEY `id_article` (`id_article`);

--
-- Index pour la table `users`
--
ALTER TABLE `users`
  ADD PRIMARY KEY (`id_users`);

--
-- AUTO_INCREMENT pour les tables déchargées
--

--
-- AUTO_INCREMENT pour la table `article`
--
ALTER TABLE `article`
  MODIFY `id_article` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=20;

--
-- AUTO_INCREMENT pour la table `comment`
--
ALTER TABLE `comment`
  MODIFY `id_comment` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=27;

--
-- AUTO_INCREMENT pour la table `users`
--
ALTER TABLE `users`
  MODIFY `id_users` int(11) NOT NULL AUTO_INCREMENT;

--
-- Contraintes pour les tables déchargées
--

--
-- Contraintes pour la table `comment`
--
ALTER TABLE `comment`
  ADD CONSTRAINT `id_article` FOREIGN KEY (`id_article`) REFERENCES `article` (`id_article`) ON DELETE CASCADE ON UPDATE CASCADE;
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
